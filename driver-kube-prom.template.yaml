apiVersion: v1
kind: ServiceAccount
metadata:
  name: agent
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: agent
rules:
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  - namespaces
  verbs:
  - get
  - list
  - watch
- nonResourceURLs:
  - /metrics
  verbs:
    - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: agent
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: agent
subjects:
- kind: ServiceAccount
  name: agent
  namespace: default

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus
data:
  prometheus.yml: |
    remote_write:
    - url: "https://cortex.@@TENANT@@.@@CLUSTER_NAME@@.opstrace.io/api/v1/push"
      authorization:
        credentials_file: /var/run/tenant-auth/token
      queue_config:
        # some tweaks to reduce load on /push?:
        max_samples_per_send: 2000 # default 500
        min_backoff: 100ms # default 30ms
        max_backoff: 1000ms # default 100ms
    scrape_configs:
    - job_name: "avalanche"
      scrape_interval: 60s
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      # Only collect from pods with avalanche/scrape=true
      - action: keep
        regex: "true"
        source_labels:
        - __meta_kubernetes_pod_annotation_avalanche_scrape
      # Inject prometheus pod name (in case multiple prometheuses scraping same avalanche)
      - source_labels: []
        target_label: prom_instance
        replacement: @@POD_NAME@@
      # Include avalanche pod name with hash
      - action: replace
        source_labels: [__meta_kubernetes_pod_name]
        target_label: instance

---

apiVersion: v1
kind: Secret
metadata:
  name: tenant-auth-__TENANT__
stringData:
  token: '__AUTH_TOKEN__'

---

apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: tenant-prometheus-__TENANT__
spec:
  serviceName: tenant-prometheus-__TENANT__
  replicas: 1
  # We don't care about sequential deploy ordering - just launch pods in parallel
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      name: prometheus
  template:
    metadata:
      labels:
        name: prometheus
    spec:
      # For k8s target discovery
      serviceAccount: agent
      # Only deploy on nodes with this label, see eksctl.yaml
      nodeSelector:
        prometheus: yep
      # Ensure the PVC is writable by the prometheus UID
      securityContext:
        fsGroup: 65534 # "nobody" gid
      containers:
      - name: prometheus
        image: prom/prometheus:v2.26.0
        imagePullPolicy: IfNotPresent
        command:
        - /bin/sh
        - -c
        # - Update config with POD_NAME, CLUSTER_NAME, and TENANT at runtime.
        #   This allows us to share a single ConfigMap across prometheus deployments.
        # - Delete anything in the persistent volume. If prometheus is restarted due to an OOM, we don't
        #   care about the prior data, and catching up the WAL wasts time and may just cause another OOM.
        # - Configure storage to point to the PVC, and reduce the storage duration to 1h from default 15d.
        #   From the docs it sounds like these have to be configured via args, and not via the ConfigMap.
        - sed "s/@@POD_NAME@@/$POD_NAME/g" /etc/prometheus/prometheus.yml | sed "s/@@CLUSTER_NAME@@/$CLUSTER_NAME/g" | sed "s/@@TENANT@@/$TENANT/g" > /tmp/prometheus.yml && cat /tmp/prometheus.yml && whoami && ls -l /storage && df -h && rm -rf /storage/* && /bin/prometheus --config.file=/tmp/prometheus.yml --storage.tsdb.path=/storage --storage.tsdb.retention.time=1h
        env:
        - name: CLUSTER_NAME
          value: __CLUSTER_NAME__
        - name: TENANT
          value: __TENANT__
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        ports:
        - name: ui
          containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: tenant-auth
          mountPath: /var/run/tenant-auth
          readOnly: true
        - name: storage
          mountPath: /storage
      volumes:
      - name: config
        configMap:
          name: prometheus
      - name: tenant-auth
        secret:
          secretName: tenant-auth-__TENANT__
  volumeClaimTemplates:
  - metadata:
      name: storage
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 100Gi # arbitrary number that sounds "big enough", can adjust later
